{"ast":null,"code":"var _jsxFileName = \"/home/faisal9878/Documents/cloudprint/React projects/crypto tracker/crypto-hunter/src/components/CoinInfo.js\",\n    _s = $RefreshSig$();\n\nimport { CircularProgress, createTheme, makeStyles, ThemeProvider } from '@material-ui/core';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { HistoricalChart } from '../config/api';\nimport { CryptoState } from '../CryptoContext';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CoinInfo = _ref => {\n  _s();\n\n  let {\n    coin\n  } = _ref;\n  const [historicalData, setHistoricalData] = useState();\n  const [days, setDays] = useState(1);\n  const [flag, setflag] = useState(false);\n  const {\n    currency\n  } = CryptoState();\n\n  const fetchHistoricalData = async () => {\n    const {\n      data\n    } = await axios.get(HistoricalChart(coin.id, days, currency));\n    setflag(true);\n    setHistoricalData(data.prices);\n  };\n\n  console.log(\"data\", historicalData);\n  useEffect(() => {\n    fetchHistoricalData(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currency, days]);\n  const darkTheme = createTheme({\n    palette: {\n      primary: {\n        main: \"#fff\"\n      },\n      type: \"dark\"\n    }\n  });\n  const useStyles = makeStyles(theme => ({\n    container: {\n      width: \"75%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      marginTop: 25,\n      padding: 40,\n      [theme.breakpoints.down(\"md\")]: {\n        width: \"100%\",\n        marginTop: 0,\n        padding: 20,\n        paddingTop: 0\n      }\n    }\n  }));\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: darkTheme,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.container,\n      children: !historicalData | flag === false ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n        style: {\n          color: \"gold\"\n        },\n        size: 250,\n        thickness: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Line, {\n          data: {\n            labels: historicalData.map(coin => {\n              let date = new Date(coin[0]);\n              let time = date.getHours() > 12 ? `${date.getHours() - 12}:${date.getMinutes()} PM` : `${date.getHours()}:${date.getMinutes()} AM`;\n              return days === 1 ? time : date.toLocaleDateString();\n            }),\n            datasets: [{\n              data: historicalData.map(coin => coin[1]),\n              label: `Price ( Past ${days} Days ) in ${currency}`,\n              borderColor: \"#EEBC1D\"\n            }]\n          },\n          options: {\n            elements: {\n              point: {\n                radius: 1\n              }\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CoinInfo, \"anqAJWqP2uf/bMK2XDMs4pmKaKo=\", true);\n\n_c = CoinInfo;\nexport default CoinInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinInfo\");","map":{"version":3,"sources":["/home/faisal9878/Documents/cloudprint/React projects/crypto tracker/crypto-hunter/src/components/CoinInfo.js"],"names":["CircularProgress","createTheme","makeStyles","ThemeProvider","axios","React","useEffect","useState","HistoricalChart","CryptoState","Line","CoinInfo","coin","historicalData","setHistoricalData","days","setDays","flag","setflag","currency","fetchHistoricalData","data","get","id","prices","console","log","darkTheme","palette","primary","main","type","useStyles","theme","container","width","display","flexDirection","alignItems","justifyContent","marginTop","padding","breakpoints","down","paddingTop","classes","color","labels","map","date","Date","time","getHours","getMinutes","toLocaleDateString","datasets","label","borderColor","elements","point","radius"],"mappings":"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","sourcesContent":["import { CircularProgress, createTheme, makeStyles, ThemeProvider } from '@material-ui/core';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react'\nimport { HistoricalChart } from '../config/api';\nimport { CryptoState } from '../CryptoContext';\nimport { Line } from 'react-chartjs-2';\n\n\nconst CoinInfo = ({coin}) => {\n  const [historicalData, setHistoricalData] = useState();\n  const [days, setDays] = useState(1);\n  const [flag,setflag] = useState(false);\n  const { currency } = CryptoState();\n\n  const fetchHistoricalData = async () => {\n    const { data } = await axios.get(HistoricalChart(coin.id, days, currency));\n\n    setflag(true);\n    setHistoricalData(data.prices);\n  };\n  console.log(\"data\", historicalData);\n  useEffect(() => {\n    fetchHistoricalData();\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currency, days]);\n  \n  const darkTheme = createTheme({\n    palette: {\n      primary: {\n        main: \"#fff\",\n      },\n      type: \"dark\",\n    },\n  });\n\n\n  const useStyles = makeStyles((theme)=> ({\n    container: {\n      width: \"75%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      marginTop: 25,\n      padding: 40,\n      [theme.breakpoints.down(\"md\")]: {\n        width: \"100%\",\n        marginTop: 0,\n        padding: 20,\n        paddingTop: 0, \n      },\n    }\n  }));\n\n  const classes = useStyles();\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <div className={classes.container}>\n        \n        {\n          !historicalData | flag===false ? (\n            <CircularProgress\n              style={{ color: \"gold\" }}\n              size={250}\n              thickness={1}\n            />\n          ) : (\n            <>\n              {/* <Line\n                data={{\n                  labels: historicalData.map((coin) => {\n                    let date = new Date(coin[0]);\n                    let time = \n                      date.getHours() > 12\n                      ? `${date.getHours() - 12}:${date.getMinutes()} PM`\n                      : `${date.getHours()}:${date.getMinutes()} AM`;\n                      \n                    return days===1 ? time : date.toLocaleDateString();\n                  }),\n                  datasets: [\n                    {\n                    data: historicalData.map((coin) => coin[1]),\n                    label: `Price ( past ${days} Days ) in ${currency}`,\n                    borderColor: \"#EEBC1D\",\n                  },\n                ],\n                }}\n              /> */}\n              <Line\n              data={{\n                labels: historicalData.map((coin) => {\n                  let date = new Date(coin[0]);\n                  let time =\n                    date.getHours() > 12\n                      ? `${date.getHours() - 12}:${date.getMinutes()} PM`\n                      : `${date.getHours()}:${date.getMinutes()} AM`;\n                  return days === 1 ? time : date.toLocaleDateString();\n                }),\n\n                datasets: [\n                  {\n                    data: historicalData.map((coin) => coin[1]),\n                    label: `Price ( Past ${days} Days ) in ${currency}`,\n                    borderColor: \"#EEBC1D\",\n                  },\n                ],\n              }}\n              options={{\n                elements: {\n                  point: {\n                    radius: 1,\n                  },\n                },\n              }}\n            />\n            </>\n          )\n        }\n\n      </div>\n    </ThemeProvider>\n  )\n}\n\nexport default CoinInfo"]},"metadata":{},"sourceType":"module"}